#Basic concepts#
Key
1.1 Primary Key - a field in a table that uniquely identifies each row/record in a database table.  
              A table can have only one primary key, which may consist of single or multiple fields. When multiple fields are used as a primary key, they are called a composite key.
1.2 Foreign Key - a foreign key is a key used to link two tables together. 
              The relationship between 2 tables matches the Primary Key in one of the tables with a Foreign Key in the second table.
1.3 Unique Key - A unique key is a set of one or more than one fields/columns of a table that uniquely identifies a record in a database table. You can say that it is little like a primary key but it can accept only one null value and it cannot have duplicate values.
Joins - combine tables
2.1 Left Join - returns all records from left table and match records from the right table
2.2 Right Join - returns all records from right table and match records from the left table
2.3 Inner Join - returns all records that have matching values in both tables
2.4 Outer Join- returns all records where there is a match in either left or right table
2.5 Self join - the table is joined with itself
2.6 Cross join - is used to generate a paired combination of each row of the first table with each row of the second table. This join type is also known as cartesian join.
Union and Union all - combine the result-set of two or more SELECT statements
3.1 Requires: Same number and order of columns
                 Similar data types
            3.2 Difference between:  To allow duplicate values, use UNION ALL. 
Where and Having 
The having clause was added because WHERE canâ€™t be used with aggregate functions
Where filtered data based on specific table condition
Having filtered data based on specific group condition
Rank and Dense_rank
5.1 RANK gives you the ranking within your ordered partition. Ties are assigned the same rank, with the next ranking(s) skipped. So, if you have 3 items at rank 2, the next rank listed would be ranked 5.  1,2,3,3,5
5.2 DENSE_RANK gives you the ranking within your ordered partition, but the ranks are consecutive. No ranks are skipped if there are ranks with multiple items.1,2,3,3,4,4
Views - Virtual tables that do not store any data of their own but display data stored in other tables. In other words, VIEWS are nothing but SQL Queries.
Table - a set of data that are organized in a model with columns and rows
Columns - categorized as vertical 
            Rows - categorized as horizontal
Window Functions - calculation across a set of table rows
8.1 SUM() OVER (ORDER BY   )  AS   |  AVG / COUNT 
8.2 ROW_NUMBER() OVER (PARTITION BY      ORDER BY)  AS 
The Row_Number function is used to provide consecutive numbering of the rows in the result by the order selected in the OVER clause for each partition specified in the OVER clause. It will assign the value 1 for the first row and increase the number of the subsequent rows.
8.3 RANK and DENSE_RANK
 
#Basic Statements# 
To create new tables, views, databases
CREATE TABLE Persons (
	PersonID int,
	LastName varchar(255),
	FirstName varchar(255),
	Address varchar(255),
	City varchar(255)  );
CREATE TABLE TestTable AS
SELECT customername, contactname
           FROM customers;
To insert data 
          INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
           VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
To delete data
          DELETE FROM Customers; - deletes all rows in the "Customers" table, without deleting the table, This means that the table structure, attributes, and indexes will be intact.
To update data If you omit WHERE, all records will be updated!
           UPDATE Customers
            SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
            WHERE CustomerID = 1;
To drop table or database
             DROP TABLE Shippers
             DROP DATABASE testDB 
To add, delete or modify columns in an existing table
ALTER TABLE Customers 
ADD Email varchar(255); / DROP COLUMN email

Category Questions 
Join
175 - left join can include NULL values in the left table
181 - self join
196 - self join
197 - self join
Rank
Case When
1179 - sum(case when then else null end) as
627 - set sex = (case when sex = 'm' then  'f' else 'm' end)  For swaping data
Not IN
196 - select (id not in (select ))  ***Derive merges optimization***
603 -  (c.seat_id+1 IN (SELECT seat_id FROM Cinema WHERE free =1)  OR        c.seat_id-1 IN (SELECT seat_id FROM Cinema WHERE free =1))


Having 
1511 - Having sum(if(left, , )* ) >= 
Date related
Datediff: 197 - DATEDIFF(b.recordDate,a.recordDate) = 1


 
